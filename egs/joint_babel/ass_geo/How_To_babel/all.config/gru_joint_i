#####################
####### ASR #########

input-node name=input dim=23
component name=L0_fixaffine type=FixedAffineComponent matrix=exp/nnet3/lstm/configs/lda.mat
# Input gate control : W_i* matrices



#component name=Lstm1_W_i-xc type=NaturalGradientAffineComponent input-dim=1139 output-dim=1024 
component name=Lstm1_W_i-xc type=NaturalGradientAffineComponent input-dim=1651 output-dim=1024 



# Forget gate control : leaky integration with input gate
component name=Lstm1_fi type=LeakyComponent dim=1024 
#  Output gate control : W_o* matrices
component name=Lstm1_W_o-xc type=NaturalGradientAffineComponent input-dim=1139 output-dim=1024 
# Cell input matrices : W_c* matrices
component name=Lstm1_W_g-xm type=NaturalGradientAffineComponent input-dim=1139 output-dim=1024 
# Defining the non-linearities
component name=Lstm1_i type=SigmoidComponent dim=1024 self-repair-scale=0.0000100000
component name=Lstm1_o type=SigmoidComponent dim=1024 self-repair-scale=0.0000100000
component name=Lstm1_g type=TanhComponent dim=1024 self-repair-scale=0.0000100000
# Defining the cell computations
component name=Lstm1_c1 type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_c2 type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_m type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_c type=ClipGradientComponent dim=1024 clipping-threshold=30.0 norm-based-clipping=True self-repair-scale=1.00
# projection matrices : Wr*
component name=Final_affine type=NaturalGradientAffineComponent input-dim=1024 output-dim=3349 
component name=Final_log_softmax type=LogSoftmaxComponent dim=3349

#Component nodes
component-node name=L0_fixaffine component=L0_fixaffine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
# i_t
component-node name=Lstm1_i1 component=Lstm1_W_i-xc input=Append(L0_fixaffine, IfDefined(Offset(Lstm1_c_t, -1)), IfDefined(Offset(spk_Lstm1_c_t, -1)))
component-node name=Lstm1_i_t component=Lstm1_i input=Lstm1_i1
# f_t
component-node name=Lstm1_f_t component=Lstm1_fi input=Lstm1_i_t
# o_t
component-node name=Lstm1_o1 component=Lstm1_W_o-xc input=Append(L0_fixaffine, IfDefined(Offset(Lstm1_c_t, -1)))
component-node name=Lstm1_o_t component=Lstm1_o input=Lstm1_o1
# m_t
component-node name=Lstm1_m_t component=Lstm1_m input=Append(Lstm1_o_t, IfDefined(Offset(Lstm1_c_t, -1)))
# g_t
component-node name=Lstm1_g1 component=Lstm1_W_g-xm input=Append(L0_fixaffine, Lstm1_m_t)
component-node name=Lstm1_g_t component=Lstm1_g input=Lstm1_g1
# parts of c_t
component-node name=Lstm1_c1_t component=Lstm1_c1  input=Append(Lstm1_f_t, IfDefined(Offset(Lstm1_c_t, -1)))
component-node name=Lstm1_c2_t component=Lstm1_c2 input=Append(Lstm1_i_t, Lstm1_g_t)
component-node name=Lstm1_c_t component=Lstm1_c input=Sum(Lstm1_c1_t, Lstm1_c2_t)
# r_t
component-node name=Final_affine component=Final_affine input=Lstm1_c_t
component-node name=Final_log_softmax component=Final_log_softmax input=Final_affine
output-node name=output input=Offset(Final_log_softmax,5) objective=linear

#################
####### spk #####

component name=spk_L0_fixaffine type=FixedAffineComponent matrix=exp/nnet3/lstm_lang_raw/configs/lda.mat
# Input gate control : W_i* matrices


#component name=spk_Lstm1_W_i-xc type=NaturalGradientAffineComponent input-dim=627 output-dim=512 
component name=spk_Lstm1_W_i-xc type=NaturalGradientAffineComponent input-dim=1651 output-dim=512 


# Forget gate control : leaky integration with input gate
component name=spk_Lstm1_fi type=LeakyComponent dim=512 
#  Output gate control : W_o* matrices
component name=spk_Lstm1_W_o-xc type=NaturalGradientAffineComponent input-dim=627 output-dim=512 
# Cell input matrices : W_c* matrices
component name=spk_Lstm1_W_g-xm type=NaturalGradientAffineComponent input-dim=627 output-dim=512 
# Defining the non-linearities
component name=spk_Lstm1_i type=SigmoidComponent dim=512 self-repair-scale=0.0000100000
component name=spk_Lstm1_o type=SigmoidComponent dim=512 self-repair-scale=0.0000100000
component name=spk_Lstm1_g type=TanhComponent dim=512 self-repair-scale=0.0000100000
# Defining the cell computations
component name=spk_Lstm1_c1 type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_c2 type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_m type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_c type=ClipGradientComponent dim=512 clipping-threshold=30.0 norm-based-clipping=True self-repair-scale=1.00
# projection matrices : Wr*
component name=spk_Final_affine type=NaturalGradientAffineComponent input-dim=512 output-dim=2 
component name=spk_Final_log_softmax type=LogSoftmaxComponent dim=2

#Component nodes
component-node name=spk_L0_fixaffine component=spk_L0_fixaffine input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
# i_t
component-node name=spk_Lstm1_i1 component=spk_Lstm1_W_i-xc input=Append(spk_L0_fixaffine, IfDefined(Offset(spk_Lstm1_c_t, -1)), IfDefined(Offset(Lstm1_c_t, -1)))
component-node name=spk_Lstm1_i_t component=spk_Lstm1_i input=spk_Lstm1_i1
# f_t
component-node name=spk_Lstm1_f_t component=spk_Lstm1_fi input=spk_Lstm1_i_t
# o_t
component-node name=spk_Lstm1_o1 component=spk_Lstm1_W_o-xc input=Append(spk_L0_fixaffine, IfDefined(Offset(spk_Lstm1_c_t, -1)))
component-node name=spk_Lstm1_o_t component=spk_Lstm1_o input=spk_Lstm1_o1
# m_t
component-node name=spk_Lstm1_m_t component=spk_Lstm1_m input=Append(spk_Lstm1_o_t, IfDefined(Offset(spk_Lstm1_c_t, -1)))
# g_t
component-node name=spk_Lstm1_g1 component=spk_Lstm1_W_g-xm input=Append(spk_L0_fixaffine, spk_Lstm1_m_t)
component-node name=spk_Lstm1_g_t component=spk_Lstm1_g input=spk_Lstm1_g1
# parts of c_t
component-node name=spk_Lstm1_c1_t component=spk_Lstm1_c1  input=Append(spk_Lstm1_f_t, IfDefined(Offset(spk_Lstm1_c_t, -1)))
component-node name=spk_Lstm1_c2_t component=spk_Lstm1_c2 input=Append(spk_Lstm1_i_t, spk_Lstm1_g_t)
component-node name=spk_Lstm1_c_t component=spk_Lstm1_c input=Sum(spk_Lstm1_c1_t, spk_Lstm1_c2_t)
# r_t
component-node name=spk_Final_affine component=spk_Final_affine input=spk_Lstm1_c_t
component-node name=spk_Final_log_softmax component=spk_Final_log_softmax input=spk_Final_affine
output-node name=output_plus input=Offset(spk_Final_log_softmax,5) objective=linear
