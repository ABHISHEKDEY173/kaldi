input-node name=input dim=40


########################################################
########################## speech ######################
#
component name=L0_lda type=FixedAffineComponent matrix=exp/nnet3/lstm_speech_a/configs/lda.mat
# Input gate control : W_i* matrices
component name=Lstm1_W_i-xr type=NaturalGradientAffineComponent input-dim=456 output-dim=1024 
# note : the cell outputs pass through a diagonal matrix
component name=Lstm1_w_ic type=NaturalGradientPerElementScaleComponent  dim=1024  param-mean=0.0 param-stddev=1.0 
# Forget gate control : W_f* matrices


#component name=Lstm1_W_f-xr type=NaturalGradientAffineComponent input-dim=456 output-dim=1024 
component name=Lstm1_W_f-xr type=NaturalGradientAffineComponent input-dim=584 output-dim=1024 


# note : the cell outputs pass through a diagonal matrix
component name=Lstm1_w_fc type=NaturalGradientPerElementScaleComponent  dim=1024  param-mean=0.0 param-stddev=1.0 
#  Output gate control : W_o* matrices
component name=Lstm1_W_o-xr type=NaturalGradientAffineComponent input-dim=456 output-dim=1024 
# note : the cell outputs pass through a diagonal matrix
component name=Lstm1_w_oc type=NaturalGradientPerElementScaleComponent  dim=1024  param-mean=0.0 param-stddev=1.0 
# Cell input matrices : W_c* matrices
component name=Lstm1_W_c-xr type=NaturalGradientAffineComponent input-dim=456 output-dim=1024 
# Defining the non-linearities
component name=Lstm1_i type=SigmoidComponent dim=1024
component name=Lstm1_f type=SigmoidComponent dim=1024
component name=Lstm1_o type=SigmoidComponent dim=1024
component name=Lstm1_g type=TanhComponent dim=1024
component name=Lstm1_h type=TanhComponent dim=1024
# Defining the cell computations
component name=Lstm1_c1 type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_c2 type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_m type=ElementwiseProductComponent input-dim=2048 output-dim=1024
component name=Lstm1_c type=ClipGradientComponent dim=1024 clipping-threshold=30.0 norm-based-clipping=true 
# projection matrices : Wrm and Wpm
component name=Lstm1_W-m type=NaturalGradientAffineComponent input-dim=1024 output-dim=512 
component name=Lstm1_r type=ClipGradientComponent dim=256 clipping-threshold=30.0 norm-based-clipping=true 
component name=Final_affine type=NaturalGradientAffineComponent input-dim=512 output-dim=3377
component name=Final_log_softmax type=LogSoftmaxComponent dim=3377

#Component nodes
component-node name=L0_lda component=L0_lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
component-node name=Lstm1_c_t component=Lstm1_c input=Sum(Lstm1_c1_t, Lstm1_c2_t)
# i_t
component-node name=Lstm1_i1 component=Lstm1_W_i-xr input=Append(L0_lda, IfDefined(Offset(Lstm1_r_t, -1)))
component-node name=Lstm1_i2 component=Lstm1_w_ic  input=IfDefined(Offset(Lstm1_c_t, -1))
component-node name=Lstm1_i_t component=Lstm1_i input=Sum(Lstm1_i1, Lstm1_i2)
# f_t


#component-node name=Lstm1_f1 component=Lstm1_W_f-xr input=Append(L0_lda, IfDefined(Offset(Lstm1_r_t, -1)))
component-node name=Lstm1_f1 component=Lstm1_W_f-xr input=Append(L0_lda, IfDefined(Offset(Lstm1_r_t, -1)), IfDefined(Offset(spk_Lstm1_r_t, -1)))


component-node name=Lstm1_f2 component=Lstm1_w_fc  input=IfDefined(Offset(Lstm1_c_t, -1))
component-node name=Lstm1_f_t component=Lstm1_f input=Sum(Lstm1_f1,Lstm1_f2)
# o_t
component-node name=Lstm1_o1 component=Lstm1_W_o-xr input=Append(L0_lda, IfDefined(Offset(Lstm1_r_t, -1)))
component-node name=Lstm1_o2 component=Lstm1_w_oc input=Lstm1_c_t
component-node name=Lstm1_o_t component=Lstm1_o input=Sum(Lstm1_o1, Lstm1_o2)
# h_t
component-node name=Lstm1_h_t component=Lstm1_h input=Lstm1_c_t
# g_t
component-node name=Lstm1_g1 component=Lstm1_W_c-xr input=Append(L0_lda, IfDefined(Offset(Lstm1_r_t, -1)))
component-node name=Lstm1_g_t component=Lstm1_g input=Lstm1_g1
# parts of c_t
component-node name=Lstm1_c1_t component=Lstm1_c1  input=Append(Lstm1_f_t, IfDefined(Offset(Lstm1_c_t, -1)))
component-node name=Lstm1_c2_t component=Lstm1_c2 input=Append(Lstm1_i_t, Lstm1_g_t)
# m_t
component-node name=Lstm1_m_t component=Lstm1_m input=Append(Lstm1_o_t, Lstm1_h_t)
# r_t and p_t
component-node name=Lstm1_rp_t component=Lstm1_W-m input=Lstm1_m_t
dim-range-node name=Lstm1_r_t_preclip input-node=Lstm1_rp_t dim-offset=0 dim=256
component-node name=Lstm1_r_t component=Lstm1_r input=Lstm1_r_t_preclip
component-node name=Final_affine component=Final_affine input=Lstm1_rp_t
component-node name=Final_log_softmax component=Final_log_softmax input=Final_affine
output-node name=output input=Offset(Final_log_softmax,5)




########################################################
######################### spk ##########################
#
component name=spk_L0_lda type=FixedAffineComponent matrix=exp/nnet3/lstm_spk_a/configs/lda.mat
# Input gate control : W_i* matrices
component name=spk_Lstm1_W_i-xr type=NaturalGradientAffineComponent input-dim=328 output-dim=512 
# note : the cell outputs pass through a diagonal matrix
component name=spk_Lstm1_w_ic type=NaturalGradientPerElementScaleComponent  dim=512  param-mean=0.0 param-stddev=1.0 
# Forget gate control : W_f* matrices


#component name=spk_Lstm1_W_f-xr type=NaturalGradientAffineComponent input-dim=328 output-dim=512 
component name=spk_Lstm1_W_f-xr type=NaturalGradientAffineComponent input-dim=584 output-dim=512 


# note : the cell outputs pass through a diagonal matrix
component name=spk_Lstm1_w_fc type=NaturalGradientPerElementScaleComponent  dim=512  param-mean=0.0 param-stddev=1.0 
#  Output gate control : W_o* matrices
component name=spk_Lstm1_W_o-xr type=NaturalGradientAffineComponent input-dim=328 output-dim=512 
# note : the cell outputs pass through a diagonal matrix
component name=spk_Lstm1_w_oc type=NaturalGradientPerElementScaleComponent  dim=512  param-mean=0.0 param-stddev=1.0 
# Cell input matrices : W_c* matrices
component name=spk_Lstm1_W_c-xr type=NaturalGradientAffineComponent input-dim=328 output-dim=512 
# Defining the non-linearities
component name=spk_Lstm1_i type=SigmoidComponent dim=512
component name=spk_Lstm1_f type=SigmoidComponent dim=512
component name=spk_Lstm1_o type=SigmoidComponent dim=512
component name=spk_Lstm1_g type=TanhComponent dim=512
component name=spk_Lstm1_h type=TanhComponent dim=512
# Defining the cell computations
component name=spk_Lstm1_c1 type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_c2 type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_m type=ElementwiseProductComponent input-dim=1024 output-dim=512
component name=spk_Lstm1_c type=ClipGradientComponent dim=512 clipping-threshold=30.0 norm-based-clipping=true 
# projection matrices : Wrm and Wpm
component name=spk_Lstm1_W-m type=NaturalGradientAffineComponent input-dim=512 output-dim=256 
component name=spk_Lstm1_r type=ClipGradientComponent dim=128 clipping-threshold=30.0 norm-based-clipping=true 
component name=spk_Final_affine type=NaturalGradientAffineComponent input-dim=256 output-dim=283 
component name=spk_Final_log_softmax type=LogSoftmaxComponent dim=283

#Component nodes
component-node name=spk_L0_lda component=spk_L0_lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2))
component-node name=spk_Lstm1_c_t component=spk_Lstm1_c input=Sum(spk_Lstm1_c1_t, spk_Lstm1_c2_t)
# i_t
component-node name=spk_Lstm1_i1 component=spk_Lstm1_W_i-xr input=Append(spk_L0_lda, IfDefined(Offset(spk_Lstm1_r_t, -1)))
component-node name=spk_Lstm1_i2 component=spk_Lstm1_w_ic  input=IfDefined(Offset(spk_Lstm1_c_t, -1))
component-node name=spk_Lstm1_i_t component=spk_Lstm1_i input=Sum(spk_Lstm1_i1, spk_Lstm1_i2)
# f_t


#component-node name=spk_Lstm1_f1 component=spk_Lstm1_W_f-xr input=Append(spk_L0_lda, IfDefined(Offset(spk_Lstm1_r_t, -1)))
component-node name=spk_Lstm1_f1 component=spk_Lstm1_W_f-xr input=Append(spk_L0_lda, IfDefined(Offset(spk_Lstm1_r_t, -1)), IfDefined(Offset(Lstm1_r_t, -1)))


component-node name=spk_Lstm1_f2 component=spk_Lstm1_w_fc  input=IfDefined(Offset(spk_Lstm1_c_t, -1))
component-node name=spk_Lstm1_f_t component=spk_Lstm1_f input=Sum(spk_Lstm1_f1,spk_Lstm1_f2)
# o_t
component-node name=spk_Lstm1_o1 component=spk_Lstm1_W_o-xr input=Append(spk_L0_lda, IfDefined(Offset(spk_Lstm1_r_t, -1)))
component-node name=spk_Lstm1_o2 component=spk_Lstm1_w_oc input=spk_Lstm1_c_t
component-node name=spk_Lstm1_o_t component=spk_Lstm1_o input=Sum(spk_Lstm1_o1, spk_Lstm1_o2)
# h_t
component-node name=spk_Lstm1_h_t component=spk_Lstm1_h input=spk_Lstm1_c_t
# g_t
component-node name=spk_Lstm1_g1 component=spk_Lstm1_W_c-xr input=Append(spk_L0_lda, IfDefined(Offset(spk_Lstm1_r_t, -1)))
component-node name=spk_Lstm1_g_t component=spk_Lstm1_g input=spk_Lstm1_g1
# parts of c_t
component-node name=spk_Lstm1_c1_t component=spk_Lstm1_c1  input=Append(spk_Lstm1_f_t, IfDefined(Offset(spk_Lstm1_c_t, -1)))
component-node name=spk_Lstm1_c2_t component=spk_Lstm1_c2 input=Append(spk_Lstm1_i_t, spk_Lstm1_g_t)
# m_t
component-node name=spk_Lstm1_m_t component=spk_Lstm1_m input=Append(spk_Lstm1_o_t, spk_Lstm1_h_t)
# r_t and p_t
component-node name=spk_Lstm1_rp_t component=spk_Lstm1_W-m input=spk_Lstm1_m_t
dim-range-node name=spk_Lstm1_r_t_preclip input-node=spk_Lstm1_rp_t dim-offset=0 dim=128
component-node name=spk_Lstm1_r_t component=spk_Lstm1_r input=spk_Lstm1_r_t_preclip
component-node name=spk_Final_affine component=spk_Final_affine input=spk_Lstm1_rp_t
component-node name=spk_Final_log_softmax component=spk_Final_log_softmax input=spk_Final_affine
output-node name=output_plus input=Offset(spk_Final_log_softmax,5)
